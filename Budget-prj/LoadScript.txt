///$tab License
/*************************************************************************
* 
* Ansell Healthcare, LLC
* DVSTS Ltd.
* CONFIDENTIAL
* __________________
* 
* 2016 Ansell Healthcare, LLC 
* 2016 DVSTS Ltd. 
* All Rights Reserved.
* 
* NOTICE:  All information contained herein is, and remains
* the property of Ansell Healthcare, LLC and DVSTS Ltd. The
* intellectual and technical concepts contained herein are
* proprietary to Ansell Healthcare, LLC and DVSTS Ltd. and
* may be covered by U.S. and Foreign Patents, patents in
* process, and are protected by trade secret or copyright
* law. Dissemination of this information or reproduction of
* this material is strictly forbidden unless prior written
* permission is obtained from Ansell Healthcare, LLC.
*************************************************************************/
 

///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='₹ #,##0.00;₹ -#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='MM/DD/YYYY';
SET TimestampFormat='MM/DD/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

LET vReloadTime = Num(Now(),'##############');

$(Include=.\BudgetSettings.qvs);

LET vSrcPath = if(Right(vSrcPath,1) = '\',vSrcPath,vSrcPath&'\');
LET vQVDPath = if(Right(vQVDPath,1) = '\',vQVDPath,vQVDPath&'\');

$(Include=$(vINCPath)procedures.qvs);
$(Include=$(vINCPath)\transformmailprocedures.qvs);

LET pStartDate = 0;
///$tab Budget
SUB BudgetParse(pBP_FileMask,pBP_Spec,pBP_Field)
	
	IF IsNull(TableNumber('tPB_Out')) then
	
		tPB_Processed:
		LOAD
			Null() as FilePath
			,Null() as FileSize
			,Null() as FileTime
			,Null() as QVDStore
		AutoGenerate(0);
		
		LET vPB_MaxQVDStore = 0;
		
		IF Alt(FileSize(vQVDPath&'tBudget_processed.qvd'),0)>0 THEN
		
			Concatenate(tPB_Processed)
			LOAD Distinct
				*
			FROM
			[$(vQVDPath)tBudget_processed.qvd]
			(qvd);
			
			tPB_Processed_MaxQVDStore:
			LOAD
				max(QVDStore) as MaxQVDStore
			Resident tPB_Processed;
			
			LET vPB_MaxQVDStore = RangeMax(vPB_MaxQVDStore,Peek('MaxQVDStore',0,'tPB_Processed_MaxQVDStore'));
			DROP Table tPB_Processed_MaxQVDStore;
		
		ENDIF;
	
	ELSE

		tPB_Processed_MaxQVDStore:
		LOAD
			max(QVDStore) as MaxQVDStore
		Resident tPB_Processed;
		
		LET vPB_MaxQVDStore = RangeMax(vPB_MaxQVDStore,Peek('MaxQVDStore',0,'tPB_Processed_MaxQVDStore'));
		DROP Table tPB_Processed_MaxQVDStore;
	
	ENDIF;
	
	FOR Each vPB_File in FileList(pBP_FileMask)
	
		TRACE $(vPB_File);
		
		LET vPB_FileSize = FileSize(vPB_File);
		LET vPB_FileTime = text(FileTime(vPB_File));
		
		tPB_Processed_check:
		NoConcatenate LOAD *
		Resident tPB_Processed
		Where FilePath like '$(vPB_File) $(pBP_Field)';
		
		LET vPB_FileQVDStore = Peek('QVDStore',0,'tPB_Processed_check');
		LET vPB_FileSize2 = Peek('FileSize',0,'tPB_Processed_check');
		LET vPB_FileSize3 = FileSize('$(vQVDPath)tBudget_processed_$(vPB_FileQVDStore).qvd');
		LET vPB_FileTime2 = Peek('FileTime',0,'tPB_Processed_check');

		IF vPB_FileSize = vPB_FileSize2 and vPB_FileTime = vPB_FileTime2 and vPB_FileSize3>0 THEN
		
			IF IsNull(TableNumber('tPB_Out')) then
	
				tPB_Out:
				NoConcatenate
				LOAD
					*
					,tempFN as FN
					,RecNo() as RN
					,Num(Date#(Period,'YYYY-MM')) as BudgetDate
					,Num($(pBP_Field)_) as $(pBP_Field)
				FROM 
					[$(vQVDPath)tBudget_processed_$(vPB_FileQVDStore).qvd]
					(qvd)
				where alt(fabs(Num($(pBP_Field)_)),0)>0;
			
			ELSE
			
				Concatenate(tPB_Out)
				LOAD
					*
					,tempFN as FN
					,RecNo() as RN
					,Num(Date#(Period,'YYYY-MM')) as BudgetDate
					,Num($(pBP_Field)_) as $(pBP_Field)
				FROM 
					[$(vQVDPath)tBudget_processed_$(vPB_FileQVDStore).qvd]
					(qvd)
				where alt(fabs(Num($(pBP_Field)_)),0)>0;
			
			ENDIF;

				SET vPB_Message = 'File [$(vPB_File)] loaded from buffer successfuly';
				CALL LogMessage(pBP_Field,cSUCCESSFUL,vPB_Message);
		
		ELSE

			LET vBP_ErrorMode = ErrorMode;
			SET ErrorMode = 0;
			
			tPB_1:
			NoConcatenate
			LOAD 
				Null() as tempFN
			AutoGenerate (0);
	
			Concatenate(tPB_1)
			LOAD 
				FilePath() & ' $(pBP_Field)' as tempFN
				,*
			FROM
			[$(vPB_File)]
			($(pBP_Spec));
			
			IF FieldNumber('FN','tPB_1') > 0 THEN 
				DROP Field 'FN' from 'tPB_1';
			ENDIF;
			 				
			IF FieldNumber('RN','tPB_1') > 0 THEN 
				DROP Field 'RN' from 'tPB_1';
			ENDIF;
			
			LET vPB_ScriptError = ScriptError;
			
			IF (vPB_ScriptError > 0) OR (NoOfFields('tPB_1') <=1) then
			
				IF (vPB_ScriptError > 0) THEN 
		
					SET vPB_Message = 'File [$(vPB_File)] thrown an error: $(vPB_ScriptError)';
					CALL LogMessage(pBP_Field,cFAILURE,vPB_Message);
				
				ENDIF;
				
				CALL DropTable('tPB_1');
				
				LET ErrorMode = vBP_ErrorMode;
				LET vBP_ErrorMode = Null();
			
			ELSE
		
				LET ErrorMode = vBP_ErrorMode;
				LET vBP_ErrorMode = Null();
				
				LET vPB_NoOfFields = NoOfFields('tPB_1');
				LET vPB_Header = '';
				LET vPB_HeaderCnt = 0;
				LET vPB_Attrib = '';
				
	            tPB_Fields:
	            LOAD
	            	Null() as Fld
	            AutoGenerate (0);
	            
				FOR vPB_i = 1 to vPB_NoOfFields
				
					LET vPB_FieldName = FieldName(vPB_i,'tPB_1'); Concatenate(tPB_Fields) LOAD '$(vPB_FieldName)' as Fld AutoGenerate(1);
					
	//				IF IsNull(Date(Date#(vPB_FieldName,'YYYY-MM'))) then
	//				
	//					IF not Match(vPB_FieldName,'Period','BudgetSales','BudgetDate') then
	//				
	//						//LET vPB_Header = vPB_Header & if(Len(vPB_Header)>0,',','') & '[' & vPB_FieldName & ']';
	//						LET vPB_Header = if(Len('$(vPB_FieldName)')=4  or Len('$(vPB_FieldName)')=3 or Len('$(vPB_FieldName)')=2 or Len('$(vPB_FieldName)')=1, vPB_Header, vPB_Header & if(Len(vPB_Header)>0,',','') & '[' & vPB_FieldName & ']');
	//					
	//					ELSE
	//					
	//						//LET vPB_Header = vPB_Header & if(Len(vPB_Header)>0,',','') & '[' & vPB_FieldName & ']' & ' as ' & '[' & '_' & vPB_FieldName & ']';
	//						LET vPB_Header = if(Len('$(vPB_FieldName)')=4  or Len('$(vPB_FieldName)')=3 or Len('$(vPB_FieldName)')=2 or Len('$(vPB_FieldName)')=1, vPB_Header, vPB_Header & if(Len(vPB_Header)>0,',','') & '[' & vPB_FieldName & ']' & ' as ' & '[' & '_' & vPB_FieldName & ']');
	//					
	//					ENDIF;
	//					
	//					//LET vPB_HeaderCnt = vPB_HeaderCnt + 1;
	//					LET vPB_HeaderCnt = if(Len('$(vPB_FieldName)')=4  or Len('$(vPB_FieldName)')=3 or Len('$(vPB_FieldName)')=2 or Len('$(vPB_FieldName)')=1, vPB_HeaderCnt, vPB_HeaderCnt + 1);
	//									
	//				ELSE
	//			
	//					LET vPB_Attrib = vPB_Attrib & ',' & '[' & vPB_FieldName & ']';
	//				
	//				ENDIF;
				
				NEXT vPB_i;
				
				tPB_Attribs:
	            LOAD
	            	Concat(DISTINCT ',[' & Fld & ']',' ') as Attribs
	            Resident tPB_Fields
	            where not IsNull(Date(Date#(Fld,'YYYY-MM')));
	            
	            LET vPB_Attrib = Peek('Attribs',0,'tPB_Attribs');
	            DROP Table tPB_Attribs;
	            
	            tPB_Headers:
				LOAD
					Concat(DISTINCT '[' & if(Match(Fld,'Period','BudgetSales','BudgetDate'),Fld & ']' & ' as ' & '[' & '_' & Fld,Fld) & ']',', ') as Headers, count(Fld) as HeadersCnt
				Resident tPB_Fields
				where IsNull(Date(Date#(Fld,'YYYY-MM'))) and len(Fld)>4;
	
				LET vPB_Header = Peek('Headers',0,'tPB_Headers');
				LET vPB_HeaderCnt = Peek('HeadersCnt',0,'tPB_Headers');
	
				DROP Table tPB_Headers;
				DROP Table tPB_Fields;
	
				
				tPB_2:
				CrossTable(Period, $(pBP_Field)_, $(vPB_HeaderCnt))
				LOAD
					$(vPB_Header)
					$(vPB_Attrib)
				Resident tPB_1;
		
				CALL DropTable('tPB_1');
				
				RENAME Table tPB_Processed to tPB_Processed_drop;
				
				tPB_Processed:
				NoConcatenate LOAD *
				Resident tPB_Processed_drop
				Where not FilePath like '$(vPB_File) $(pBP_Field)';

				CALL DropTable('tPB_Processed_drop');
				
				LET vPB_FileQVDStore = if(IsNull(vPB_FileQVDStore),rangesum(vPB_MaxQVDStore,1),vPB_FileQVDStore);
				LET vPB_MaxQVDStore = rangemax(vPB_FileQVDStore,vPB_MaxQVDStore);

				Concatenate(tPB_Processed)
				LOAD
					'$(vPB_File) $(pBP_Field)' as FilePath
					,$(vPB_FileSize) as FileSize
					,'$(vPB_FileTime)' as FileTime
					,$(vPB_FileQVDStore) as QVDStore
				AutoGenerate(1);
				
				STORE tPB_Processed into '$(vQVDPath)tBudget_processed.qvd' (qvd);
				STORE tPB_2 into '$(vQVDPath)tBudget_processed_$(vPB_FileQVDStore).qvd' (qvd);
						
				IF IsNull(TableNumber('tPB_Out')) then
		
					tPB_Out:
					NoConcatenate
					LOAD
						*
						,tempFN as FN
						,RecNo() as RN
						,Num(Date#(Period,'YYYY-MM')) as BudgetDate
						,Num($(pBP_Field)_) as $(pBP_Field)
					Resident tPB_2
					where alt(fabs(Num($(pBP_Field)_)),0)>0;
				
				ELSE
				
					Concatenate(tPB_Out)
					LOAD
						*
						,tempFN as FN
						,RecNo() as RN
						,Num(Date#(Period,'YYYY-MM')) as BudgetDate
						,Num($(pBP_Field)_) as $(pBP_Field)
					Resident tPB_2
					where alt(fabs(Num($(pBP_Field)_)),0)>0;
				
				ENDIF;
				
				IF not cStore = 0 then
		
					LET vPB_StorePath = cStore&Left(pPB_FileMask,len(pPB_FileMask)-len(SubField(Replace(pPB_FileMask,'/','\'),'\',-1)))&'*.*';
				
					EXECUTE powershell -Command "& {xCopy '$(vPB_File)' '$(vPB_StorePath)' /y}"; 
					
					LET vPB_StorePath = Null();
				
				ENDIF
	
				CALL DropTable('tPB_2');
			
				SET vPB_Message = 'File [$(vPB_File)] loaded successfuly';
				CALL LogMessage(pBP_Field,cSUCCESSFUL,vPB_Message);
			ENDIF;

		ENDIF;
		
		CALL DropTable('tPB_Processed_check');
		LET vPB_ScriptError = Null();
		LET vPB_NoOfFields 	= Null();
		LET vPB_Header 		= Null();
		LET vPB_HeaderCnt 	= Null();
		LET vPB_Attrib 		= Null();
		LET vPB_i 			= Null();
		LET vPB_FieldName 	= Null();
		LET vPB_Message 	= Null(); 
		LET vPB_FileQVDStore = Null(); 
		LET vPB_FileSize = Null(); 
		LET vPB_FileSize2 = Null(); 
		LET vPB_FileSize3 = Null(); 
		LET vPB_FileTime = Null(); 
		LET vPB_FileTime2 = Null(); 
		
//		exit SCRIPT;
		
	NEXT vPB_File;

	CALL LogMessage(pBP_Field,cSUCCESSFUL);
	LET vPB_File = Null();
	LET vPB_MaxQVDStore = Null();

ENDSUB;





SET p_Spec = ooxml, embedded labels, table is [NET SALES];
SET p_Field = Budget_Sales;
SET p_CALL = CALL BudgetParse(vPD_Dir&'\Budget*.xlsx',p_Spec,p_Field);
CALL ParseDir('$(vSrcPath)Master\Budget*',False(),p_CALL);
CALL ParseDir('$(vSrcPath)Master\Budget SW\Budget*',False(),p_CALL);
LET p_Spec 	= Null(); 
LET p_Field = Null(); 
LET p_CALL 	= Null();

DROP Field Period From tPB_Out;

Left Join (tPB_Out)
	LOAD Distinct
		BudgetDate
		,Text(Date(BudgetDate,'YYYY')) as BudgetInc
	Resident tPB_Out;

Concatenate(tPB_Out)
	LOAD
		Null() as [RN]
		,Null() as [FN]
		,Null() as [CUSTOMER CODE]
		,Null() as [ShipToDeliveryLocationID]
		,Null() as [PRODUCT NUMBER]
		,Null() as [CURRENCY]
		,Null() as [BudgetDate]
		,Null() as [Budget_COGS]
		,Null() as [Budget_Volume]
		,Null() as [Budget_Sales]
	AutoGenerate(0);
	
SET p_Table 			= tPB_Out;
SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
SET p_IncrementalField 	= [BudgetInc];
SET p_StoreName 		= Budget;
SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
LET p_Table 			= Null();
LET p_StoreFieldList 	= Null();
LET p_IncrementalField 	= Null();
LET p_StoreName 		= Null();
LET p_StartDate			= Null();

CALL DropTable('tPB_Out');

SET p_Spec = ooxml, embedded labels, table is [COGS];
SET p_Field = Budget_COGS;
SET p_CALL = CALL BudgetParse(vPD_Dir&'\Budget*.xlsx',p_Spec,p_Field);
CALL ParseDir('$(vSrcPath)Master\Budget*',False(),p_CALL);
CALL ParseDir('$(vSrcPath)Master\Budget SW\Budget*',False(),p_CALL);
LET p_Spec 	= Null(); 
LET p_Field = Null(); 
LET p_CALL 	= Null();

DROP Field Period From tPB_Out;

Left Join (tPB_Out)
	LOAD Distinct
		BudgetDate
		,Text(Date(BudgetDate,'YYYY')) as BudgetInc
	Resident tPB_Out;

Concatenate(tPB_Out)
	LOAD
		Null() as [RN]
		,Null() as [FN]
		,Null() as [CUSTOMER CODE]
		,Null() as [ShipToDeliveryLocationID]
		,Null() as [PRODUCT NUMBER]
		,Null() as [CURRENCY]
		,Null() as [BudgetDate]
		,Null() as [Budget_COGS]
		,Null() as [Budget_Volume]
		,Null() as [Budget_Sales]
	AutoGenerate(0);
	
SET p_Table 			= tPB_Out;
SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
SET p_IncrementalField 	= [BudgetInc];
SET p_StoreName 		= Budget;
SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
LET p_Table 			= Null();
LET p_StoreFieldList 	= Null();
LET p_IncrementalField 	= Null();
LET p_StoreName 		= Null();
LET p_StartDate			= Null();

CALL DropTable('tPB_Out');

SET p_Spec = ooxml, embedded labels, table is [VOLUMES];
SET p_Field = Budget_Volume;
SET p_CALL = CALL BudgetParse(vPD_Dir&'\Budget*.xlsx',p_Spec,p_Field);
CALL ParseDir('$(vSrcPath)Master\Budget*',False(),p_CALL);
CALL ParseDir('$(vSrcPath)Master\Budget SW\Budget*',False(),p_CALL);
LET p_Spec 	= Null(); 
LET p_Field = Null(); 
LET p_CALL 	= Null();

DROP Field Period From tPB_Out;

Left Join (tPB_Out)
	LOAD Distinct
		BudgetDate
		,Text(Date(BudgetDate,'YYYY')) as BudgetInc
	Resident tPB_Out;

Concatenate(tPB_Out)
	LOAD
		Null() as [RN]
		,Null() as [FN]
		,Null() as [CUSTOMER CODE]
		,Null() as [ShipToDeliveryLocationID]
		,Null() as [PRODUCT NUMBER]
		,Null() as [CURRENCY]
		,Null() as [BudgetDate]
		,Null() as [Budget_COGS]
		,Null() as [Budget_Volume]
		,Null() as [Budget_Sales]
	AutoGenerate(0);
	
SET p_Table 			= tPB_Out;
SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
SET p_IncrementalField 	= [BudgetInc];
SET p_StoreName 		= Budget;
SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
LET p_Table 			= Null();
LET p_StoreFieldList 	= Null();
LET p_IncrementalField 	= Null();
LET p_StoreName 		= Null();
LET p_StartDate			= Null();

CALL DropTable('tPB_Out');
CALL DropTable('tPB_Processed');
///$tab Budget_PBCS
IF not IsNull(vSrcPathPBCS) THEN

	SET p_Spec = txt, utf8, embedded labels, delimiter is ',', msq;
	SET p_Field = Budget_Sales;
	CALL BudgetParse(vSrcPathPBCS&'Budget*PCBS SALES.csv',p_Spec,p_Field);
	LET p_Spec 	= Null(); 
	LET p_Field = Null(); 
	
	DROP Field Period From tPB_Out;
	
	Left Join (tPB_Out)
		LOAD Distinct
			BudgetDate
			,Text(Date(BudgetDate,'YYYY')) as BudgetInc
		Resident tPB_Out;
	
	RENAME Field [Currency] to [CURRENCY];
	
	Concatenate(tPB_Out)
		LOAD
			Null() as [RN]
			,Null() as [FN]
			,Null() as [CUSTOMER CODE]
			,Null() as [ShipToDeliveryLocationID]
			,Null() as [PRODUCT NUMBER]
			,Null() as [CURRENCY]
			,Null() as [BudgetDate]
			,Null() as [Budget_COGS]
			,Null() as [Budget_Volume]
			,Null() as [Budget_Sales]
		AutoGenerate(0);
		
	SET p_Table 			= tPB_Out;
	SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
	SET p_IncrementalField 	= [BudgetInc];
	SET p_StoreName 		= Budget;
	SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
	CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
	LET p_Table 			= Null();
	LET p_StoreFieldList 	= Null();
	LET p_IncrementalField 	= Null();
	LET p_StoreName 		= Null();
	LET p_StartDate			= Null();
	
	CALL DropTable('tPB_Out');
	
	SET p_Spec = txt, utf8, embedded labels, delimiter is ',', msq;
	SET p_Field = Budget_COGS;
	CALL BudgetParse(vSrcPathPBCS&'Budget*PCBS COGS.csv',p_Spec,p_Field);
	LET p_Spec 	= Null(); 
	LET p_Field = Null(); 
	
	DROP Field Period From tPB_Out;
	
	Left Join (tPB_Out)
		LOAD Distinct
			BudgetDate
			,Text(Date(BudgetDate,'YYYY')) as BudgetInc
		Resident tPB_Out;
	
	RENAME Field [Currency] to [CURRENCY];
	
	Concatenate(tPB_Out)
		LOAD
			Null() as [RN]
			,Null() as [FN]
			,Null() as [CUSTOMER CODE]
			,Null() as [ShipToDeliveryLocationID]
			,Null() as [PRODUCT NUMBER]
			,Null() as [CURRENCY]
			,Null() as [BudgetDate]
			,Null() as [Budget_COGS]
			,Null() as [Budget_Volume]
			,Null() as [Budget_Sales]
		AutoGenerate(0);
		
	SET p_Table 			= tPB_Out;
	SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
	SET p_IncrementalField 	= [BudgetInc];
	SET p_StoreName 		= Budget;
	SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
	CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
	LET p_Table 			= Null();
	LET p_StoreFieldList 	= Null();
	LET p_IncrementalField 	= Null();
	LET p_StoreName 		= Null();
	LET p_StartDate			= Null();
	
	CALL DropTable('tPB_Out');
	
	SET p_Spec = txt, utf8, embedded labels, delimiter is ',', msq;
	SET p_Field = Budget_Volume;
	CALL BudgetParse(vSrcPathPBCS&'Budget*PCBS VOLUMES.csv',p_Spec,p_Field);
	LET p_Spec 	= Null(); 
	LET p_Field = Null(); 
	LET p_CALL 	= Null();
	
	DROP Field Period From tPB_Out;
	
	Left Join (tPB_Out)
		LOAD Distinct
			BudgetDate
			,Text(Date(BudgetDate,'YYYY')) as BudgetInc
		Resident tPB_Out;
	
	Concatenate(tPB_Out)
		LOAD
			Null() as [RN]
			,Null() as [FN]
			,Null() as [CUSTOMER CODE]
			,Null() as [ShipToDeliveryLocationID]
			,Null() as [PRODUCT NUMBER]
			,Null() as [CURRENCY]
			,Null() as [BudgetDate]
			,Null() as [Budget_COGS]
			,Null() as [Budget_Volume]
			,Null() as [Budget_Sales]
		AutoGenerate(0);
		
	SET p_Table 			= tPB_Out;
	SET p_StoreFieldList 	= [RN],[FN],[CUSTOMER CODE],[ShipToDeliveryLocationID],[PRODUCT NUMBER],[CURRENCY],[BudgetDate],[Budget_COGS],[Budget_Volume],[Budget_Sales];
	SET p_IncrementalField 	= [BudgetInc];
	SET p_StoreName 		= Budget;
	SET p_StartDate 		=  or Num(BudgetDate) < $(pStartDate);
	CALL StoreIncremental(p_Table,p_StoreFieldList,p_IncrementalField,p_StoreName)
	LET p_Table 			= Null();
	LET p_StoreFieldList 	= Null();
	LET p_IncrementalField 	= Null();
	LET p_StoreName 		= Null();
	LET p_StartDate			= Null();
	
	CALL DropTable('tPB_Out');

ENDIF;
///$tab Logs

CALL DelLog ('$(vLOGPath)','$(vLogDocPrefixName)',$(vLogCountSaveLoad))

LET vReloadTime = Timestamp(vReloadTime,'YYYYMMDDhhmmss');

LOG:
LOAD
	RecNo() as [LOG.RN]
	,[Module]
	,[ReloadTime]
	,[TABLE]
	,[STATUS]
	,IF(STATUS = 'WARNING','Line #'&([REC_NO])&' in field ['&[MESSAGE]&'] data was replaced from value "'&FromValue&'" to value "'&ToValue&'"
	Source file: "'&FN&'"', MESSAGE)	as MESSAGE
	,REC_NO
    ,FromValue
    ,ToValue
	,if([STATUS] = 'WARNING ON DOUBLES'
		,'DOUBLES'
		,TextBetween([MESSAGE],'[',']',1)) as [FILENAME],
	FN									as [File name]
FROM
[$(vLOGPath)$(vLogDocPrefixName)*$(vReloadTime).qvd]
(qvd)
//Where Upper([Module]) = Upper(DocumentPath())
;
	
	[Log_Error]:
	LOAD 	Module,
			STATUS,
			//TABLE,
			COUNT(STATUS) as QtyWorning
	Resident LOG
	Where STATUS <> 'FAILURE'
	Group BY 	Module,
				STATUS/*,
				TABLE*/;
	
	IF NoOfFields('Log_Error') then	
		STORE Log_Error into '$(vLOGPath)$(vLogTotalPrefixName)Error_$(vReloadTime).qvd' (qvd);
		
		DROP Table Log_Error;
	ENDIF	

	CALL DelLog ('$(vLOGPath)','$(vLogDocPrefixName)',$(vLogCountSaveLoad))
	
		[Log_FAILURE]:
		NoConcatenate LOAD 	*
		Resident LOG
		Where STATUS = 'FAILURE';
	
	IF NoOfFields('Log_FAILURE') then	
		STORE Log_FAILURE into '$(vLOGPath)$(vLogTotalPrefixName)FAILURE_$(vReloadTime).qvd' (qvd);
		
		DROP Table Log_FAILURE;
	ENDIF	

	CALL DelLog ('$(vLOGPath)','$(vLogTotalPrefixName)',$(vLogCountSaveLoad))
///$tab Mail
CALL FailuresInTransformMessage('');
///$tab Exit script
EXIT SCRIPT;