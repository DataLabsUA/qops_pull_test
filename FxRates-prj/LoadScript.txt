///$tab License
/*************************************************************************
* 
* Ansell Healthcare, LLC
* DVSTS Ltd.
* CONFIDENTIAL
* __________________
* 
* 2016 Ansell Healthcare, LLC 
* 2016 DVSTS Ltd. 
* All Rights Reserved.
* 
* NOTICE:  All information contained herein is, and remains
* the property of Ansell Healthcare, LLC and DVSTS Ltd. The
* intellectual and technical concepts contained herein are
* proprietary to Ansell Healthcare, LLC and DVSTS Ltd. and
* may be covered by U.S. and Foreign Patents, patents in
* process, and are protected by trade secret or copyright
* law. Dissemination of this information or reproduction of
* this material is strictly forbidden unless prior written
* permission is obtained from Ansell Healthcare, LLC.
*************************************************************************/
 
///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='₹ #,##0.00;₹ -#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='MM/DD/YYYY';
SET TimestampFormat='MM/DD/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

LET vReloadTime = Num(Now(),'##############');

$(Include=.\fxratessettings.qvs);

LET vSrcPath = if(Right(vSrcPath,1) = '\',vSrcPath,vSrcPath&'\');
LET vQVDPath = if(Right(vQVDPath,1) = '\',vQVDPath,vQVDPath&'\');

$(Include=$(vINCPath)procedures.qvs);
$(Include=$(vINCPath)\transformmailprocedures.qvs);

SET vPurgeChars = Chr(9)&Chr(10)&Chr(13)&Chr(32)&Chr(160)&Chr(12288)&'-';
SET vRegionList = 'NA','EMEA', 'APAC' ,'Central','LAC','Microgard';
///$tab FxRates
SET pTable = FxRates;
SET pMask = Master\Fx Rates.xlsx;
SET pLoad = RecNo() as [RN]
		,FilePath() as [FN]
		,[RateCode] as [Currency]
		,MonthName(Date#([RateMonth],'YYMM')) 	as [RateMonth]
		//,[ExchangeRate] 						as [FxBasicCurrencyRate]
		,Alt([ExchangeRate],0)					as [FxBasicCurrencyRate]
		,0										as [FxBasicCurrencyRate.src]
		,[RateCode]&'-'&[RateMonth] as [RateCode-RateMonth];
SET pFileSpec = ooxml, embedded labels, table is Fx;

CALL MaskLoad(pTable, pMask, pLoad, pFileSpec);
LET pTable 		= Null(); 
LET pMask 		= Null(); 
LET pLoad 		= Null(); 
LET pFileSpec 	= Null();

IF not IsNull(TableNumber('FxRates')) then

	Left Join ([FxRates])
		LOAD Distinct
			[RN]
			,[FN]
			,1 as [QC]
		Resident [FxRates]
		Where 
			Alt([FxBasicCurrencyRate],0)<=0
			;

	IF FieldValueCount('QC') > 0 then
		SET vWhere = and QC <> 0 and FxBasicCurrencyRate <= 0;
		CALL LogMessage('FxRates',cWARNING,vMessage,'FxBasicCurrencyRate'									,'FxBasicCurrencyRate.src'									,vWhere);	
	
	ENDIF
	
	/*IF FieldValueCount('QC') > 0 then
	
		SET vMessage = 'Line #'&([RN]+1)&' in ['&[FN]&'] with RateCode-RateMonth "'&[RateCode-RateMonth]&'" has:'&chr(10)&chr(13)
			&replace(
				replace(
					';;'
					&if(Alt([FxBasicCurrencyRate],0)<=0,';[ExchangeRate] "'&[FxBasicCurrencyRate]&'". Should be positive number.;','')
					&';;'
					,';;;'
					,'')
				,';;'
				,chr(10)&chr(13))
			;
		CALL LogMessage('FxRates',cWARNING,vMessage);
	
	ENDIF;*/
	
	DROP Field [QC] From [FxRates];
	
	CALL CheckDoubles('FxRates','RateCode-RateMonth');
	DROP Field [RateCode-RateMonth] From [FxRates];
	
	IF rCheckDoubles then
	
		CALL LogMessage('FxRates',cFAILURE,'FxRates table contains doubled records. Processing impossible.');
	
	ELSE

		Left Join ([FxRates])
			LOAD Distinct
				[Currency] as [FxCurrency]
				,[RateMonth]
				,[FxBasicCurrencyRate] as [ExchangeRateTo]
			Resident [FxRates];
		
		Left Join ([FxRates])
			LOAD Distinct
				[Currency]
				,[FxCurrency]
				,[RateMonth]
				,alt([ExchangeRateTo]/[FxBasicCurrencyRate],0) as [ExchangeRate]
			Resident [FxRates];

		Left Join ([FxRates])
			LOAD Distinct
				RecNo()-1 as [BackYearDepth]
			AutoGenerate ($(vBackYearDepth) + 1);

		Left Join ([FxRates])
			LOAD Distinct
				[RateMonth]
				,[BackYearDepth]
				,MonthName(AddYears([RateMonth],-[BackYearDepth])) as [FxRateMonth]
				,[Currency]
				,[Currency]&'-'&Date(AddYears([RateMonth],-[BackYearDepth]),'YYMM') as [CompoundKey]
			Resident [FxRates];
			
		Left Join ([FxRates])
			LOAD Distinct
				[CompoundKey]
				,[FxCurrency]
				,[ExchangeRate] as [ExchangeRateB]
			Resident [FxRates]
			Where [BackYearDepth] = 0;
		
		Left Join ([FxRates])
			LOAD Distinct
				[ExchangeRate]
				,[ExchangeRateB]
				,[ExchangeRate]/[ExchangeRateB] as [ExchangeRateC]
			Resident [FxRates];
			
		STORE [CompoundKey]
			,[Currency]
			,[FxCurrency]
			,[FxBasicCurrencyRate]
			,[ExchangeRate]
			,[ExchangeRateB]
			,[ExchangeRateC]
			,[BackYearDepth]
		from [FxRates]
		into '$(vQVDPath)FxRates.qvd' (qvd);
		
		CALL LogMessage('FxRates',cSUCCESSFUL);
		CALL DropTable('FxRates');
	ENDIF;

ENDIF;

///$tab BudgetFx
SET pTable = FxRates_Budget;
SET pMask = Master\New Budget Fx Rates.xlsx;
SET pLoad = RecNo() as [RN]
		,FilePath() as [FN]
		,[RateCode] as [Currency]
//		,MonthName(Date#([RateMonth],'YYMM')) 	as [RateMonth]
		//,[ExchangeRate] 						as [FxBasicCurrencyRate]
		,Alt([ExchangeRate],0)					as [FxBasicCurrencyRate]
		,0										as [FxBasicCurrencyRate.src]
		,[Year]
		,makedate(num(num#(keepchar([Year],'0123456789')))+2000-1,7,1) as [YearStart]
//		,[RateCode]&'-'&[RateMonth] as [RateCode-RateMonth]
		;
SET pFileSpec = ooxml, embedded labels, table is [Budget Fx];

CALL MaskLoad(pTable, pMask, pLoad, pFileSpec);
LET pTable 		= Null(); 
LET pMask 		= Null(); 
LET pLoad 		= Null(); 
LET pFileSpec 	= Null();

IF not IsNull(TableNumber('FxRates_Budget')) then

	Left Join ([FxRates_Budget])
	LOAD Distinct
		[YearStart]
		,[Currency]
		,MonthName(date(MonthStart([YearStart],IterNo()-1),'YYMM')) as [RateMonth]
		,[Currency]&'-'&text(date(MonthStart([YearStart],IterNo()-1),'YYMM')) as [RateCode-RateMonth]
	Resident [FxRates_Budget]
	While IterNo()<=12;
	
	Left Join ([FxRates_Budget])
		LOAD Distinct
			[RN]
			,[FN]
			,1 as [QC]
		Resident [FxRates_Budget]
		Where 
			Alt([FxBasicCurrencyRate],0)<=0
			;

	IF FieldValueCount('QC') > 0 then
		SET vWhere = and QC <> 0 and FxBasicCurrencyRate <= 0;
		CALL LogMessage('FxRates_Budget',cWARNING,vMessage,'FxBasicCurrencyRate'									,'FxBasicCurrencyRate.src'									,vWhere);	
	
	ENDIF
	
	/*IF FieldValueCount('QC') > 0 then
	
		SET vMessage = 'Line #'&([RN]+1)&' in ['&[FN]&'] with RateCode-RateMonth "'&[RateCode-RateMonth]&'" has:'&chr(10)&chr(13)
			&replace(
				replace(
					';;'
					&if(Alt([FxBasicCurrencyRate],0)<=0,';[ExchangeRate] "'&[FxBasicCurrencyRate]&'". Should be positive number.;','')
					&';;'
					,';;;'
					,'')
				,';;'
				,chr(10)&chr(13))
			;
		CALL LogMessage('FxRates',cWARNING,vMessage);
	
	ENDIF;*/
	
	DROP Field [QC] From [FxRates_Budget];
	
	CALL CheckDoubles('FxRates_Budget','RateCode-RateMonth');
	DROP Field [RateCode-RateMonth] From [FxRates_Budget];
	DROP Field [Year] From [FxRates_Budget];

	IF rCheckDoubles then
	
		CALL LogMessage('FxRates_Budget',cFAILURE,'FxRates table contains doubled records. Processing impossible.');
	
	ELSE

		Left Join ([FxRates_Budget])
			LOAD Distinct
				[Currency] as [FxCurrency]
				,[RateMonth]
				,[FxBasicCurrencyRate] as [ExchangeRateTo]
			Resident [FxRates_Budget];
		
		Left Join ([FxRates_Budget])
			LOAD Distinct
				[Currency]
				,[FxCurrency]
				,[RateMonth]
				,alt([ExchangeRateTo]/[FxBasicCurrencyRate],0) as [ExchangeRate]
			Resident [FxRates_Budget];

		Left Join ([FxRates_Budget])
			LOAD Distinct
				RecNo()-1 as [BackYearDepth]
			AutoGenerate ($(vBackYearDepth) + 1);

		Left Join ([FxRates_Budget])
			LOAD Distinct
				[RateMonth]
				,[BackYearDepth]
				,MonthName(AddYears([RateMonth],-[BackYearDepth])) as [FxRateMonth]
				,[Currency]
				,[Currency]&'-'&Date(AddYears([RateMonth],-[BackYearDepth]),'YYMM') as [CompoundKey]
			Resident [FxRates_Budget];
			
		Left Join ([FxRates_Budget])
			LOAD Distinct
				[CompoundKey]
				,[FxCurrency]
				,[ExchangeRate] as [ExchangeRateB]
			Resident [FxRates_Budget]
			Where [BackYearDepth] = 0;
		
		Left Join ([FxRates_Budget])
			LOAD Distinct
				[ExchangeRate]
				,[ExchangeRateB]
				,[ExchangeRate]/[ExchangeRateB] as [ExchangeRateC]
			Resident [FxRates_Budget];
			
		STORE [CompoundKey]
			,[Currency]
			,[FxCurrency]
			,[FxBasicCurrencyRate]
			,[ExchangeRate]
			,[ExchangeRateB]
			,[ExchangeRateC]
			,[BackYearDepth]
		from [FxRates_Budget]
		into '$(vQVDPath)FxRates_Budget.qvd' (qvd);
		
		CALL LogMessage('FxRates_Budget',cSUCCESSFUL);
		CALL DropTable('FxRates_Budget');
	ENDIF;

ENDIF;

///$tab Logs

CALL DelLog ('$(vLOGPath)','$(vLogDocPrefixName)',$(vLogCountSaveLoad))

LET vReloadTime = Timestamp(vReloadTime,'YYYYMMDDhhmmss');

LOG:
LOAD
	RecNo() as [LOG.RN]
	,[Module]
	,[ReloadTime]
	,[TABLE]
	,[STATUS]
	,IF(STATUS = 'WARNING','Line #'&([REC_NO])&' in field ['&[MESSAGE]&'] data was replaced from value "'&FromValue&'" to value "'&ToValue&'"
	Source file: "'&FN&'"', MESSAGE)	as MESSAGE
	,REC_NO
    ,FromValue
    ,ToValue
	,if([STATUS] = 'WARNING ON DOUBLES'
		,'DOUBLES'
		,TextBetween([MESSAGE],'[',']',1)) as [FILENAME],
	FN									as [File name]
FROM
[$(vLOGPath)$(vLogDocPrefixName)*$(vReloadTime).qvd]
(qvd)
//Where Upper([Module]) = Upper(DocumentPath())
;
	
	[Log_Error]:
	LOAD 	Module,
			STATUS,
			//TABLE,
			COUNT(STATUS) as QtyWorning
	Resident LOG
	Where STATUS <> 'FAILURE'
	Group BY 	Module,
				STATUS/*,
				TABLE*/;
	
	IF NoOfFields('Log_Error') then	
		STORE Log_Error into '$(vLOGPath)$(vLogTotalPrefixName)Error_$(vReloadTime).qvd' (qvd);
		
		DROP Table Log_Error;
	ENDIF	

	CALL DelLog ('$(vLOGPath)','$(vLogDocPrefixName)',$(vLogCountSaveLoad))
	
		[Log_FAILURE]:
		NoConcatenate LOAD 	*
		Resident LOG
		Where STATUS = 'FAILURE';
	
	IF NoOfFields('Log_FAILURE') then	
		STORE Log_FAILURE into '$(vLOGPath)$(vLogTotalPrefixName)FAILURE_$(vReloadTime).qvd' (qvd);
		
		DROP Table Log_FAILURE;
	ENDIF	

	CALL DelLog ('$(vLOGPath)','$(vLogTotalPrefixName)',$(vLogCountSaveLoad))
///$tab Mail
CALL FailuresInTransformMessage('');

LET vGL_MaskList = NULL();

Exit SCRIPT;